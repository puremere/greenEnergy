@model greenEnergy.ViewModel.pageContentVM
@using Newtonsoft.Json;
@using greenEnergy.ViewModel;
@{


    string style = Model.dataList.SingleOrDefault(x => x.title == "style") == null ? "" : Model.dataList.SingleOrDefault(x => x.title == "style").title2;
    styleVM styleModel = new greenEnergy.ViewModel.styleVM();
    string finalStyle = "";
    if (!string.IsNullOrEmpty(style))
    {
        finalStyle = greenEnergy.Classes.methods.getMyStyle(style);
    }



}

@if (Request.Cookies["adminToken"] != null)
{
    @Html.Partial("/Views/Shared/" + @System.Configuration.ConfigurationManager.AppSettings["name"] + "/Layouts/_controllerModalParent.cshtml", Model)
}
@{
    Dictionary<string, string> groups = new Dictionary<string, string>();
    foreach (var item in Model.contentChild)
    {
        int index = Model.contentChild.IndexOf(item) + 1;
        string key = item.dataList.SingleOrDefault(x => x.title == "group").title2 == "" ? "عنوان مرتبط یک" : item.dataList.SingleOrDefault(x => x.title == "group").title2;
        List<string> keys = key.Trim(',').Split(',').ToList();
        foreach (var ky in keys)
        {

            if (!groups.ContainsKey(ky))
            {
                Random rnd = new Random();
                int num = rnd.Next(5, 8);
                string random = greenEnergy.Classes.methods.RandomString(num) + index;
                groups.Add(ky, random);
                item.dataList.SingleOrDefault(x => x.title == "group").title2 = item.dataList.SingleOrDefault(x => x.title == "group").title2.Replace(ky, random);
            }
            else
            {
                item.dataList.SingleOrDefault(x => x.title == "group").title2 = item.dataList.SingleOrDefault(x => x.title == "group").title2.Replace(ky, groups[ky]);
            }
        }

    }
}
<section class="portfolio" style="background-color:white">
    <div class="container">
        <div class="row">
            <div class="col-xl-12">
                <ul class="portfolio-filter style1 post-filter has-dynamic-filters-counter list-unstyled">
                    @foreach (var item in groups)
                    {
                        <li data-filter=".@item.Value" class="active"><span class="filter-text">@item.Key</span></li>
                    }

                    @*<li data-filter=".cou" class="active"><span class="filter-text">تیتر1</span></li>*@
                </ul>
            </div>
        </div>



        @*<div class="row filter-layout masonary-layout">

            </div>*@

        @*<div class="row">
                <div class="col-xl-12">
                    <ul class="portfolio-filter style1 post-filter has-dynamic-filters-counter list-unstyled">
                        <li data-filter=".filter-item" class="active"><span class="filter-text">تیتر1</span></li>
                        <li data-filter=".stra"><span class="filter-text">تیتر2</span></li>
                        <li data-filter=".busi"><span class="filter-text">تیتر3</span></li>
                        <li data-filter=".insur"><span class="filter-text">تیتر4</span></li>
                        <li data-filter=".poli"><span class="filter-text last-pd-none">تیتر5</span></li>
                    </ul>
                </div>
            </div>*@
        <div class="row filter-layout masonary-layout">
            <!--Portfolio Single Start-->

            @Html.Partial("/Views/Shared/" + @System.Configuration.ConfigurationManager.AppSettings["name"] + "/Layouts/_childContent.cshtml", Model)



        </div>
    </div>
</section>